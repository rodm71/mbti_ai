"use client"; // Ce composant tourne c√¥t√© navigateur

import { useState } from "react";

export default function MBTIPage() {
  // La liste des questions
  const questions = [
    "Vous arrivez √† aller parler √† quelqu'un qui vous int√©resse",
    "Vous aimez planifier chaque d√©tail avant d'agir",
    "Vous pr√©f√©rez √™tre seul plut√¥t qu'entour√© de monde",
    "Vous prenez des d√©cisions sur un coup de t√™te",
    "Vous aimez analyser les choses en profondeur",
    "Vous ressentez facilement l'humeur des autres"
  ];

  // state pour stocker les r√©ponses : cl√© = index question, valeur = score (1-6)
  const [answers, setAnswers] = useState<{ [key: number]: number }>({});

  // Fonction pour g√©rer quand un radio bouton change
  const handleChange = (questionIndex: number, value: number) => {
    setAnswers({
      ...answers,
      [questionIndex]: value,
    });
  };

  // Soumission : affichage dans la console pour l'instant
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("R√©ponses : ", answers);

    // ‚úÖ R√©cup√®re le JWT dans le localStorage
    const token = localStorage.getItem("access_token");
    if (!token) {
        console.error("‚ùå Pas de token !");
        return;
    }

    // ‚úÖ Exemple : on calcule le type MBTI c√¥t√© Front pour l'instant
    // üëâ Ici tu mettras ta logique de calcul plus tard
    const fakeType = "ENTJ"; // Ex : temporaire pour tester

    try {
        const res = await fetch("http://127.0.0.1:8000/mbti", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({
                mbti_type: fakeType, // ‚¨ÖÔ∏è doit matcher ton MBTICreate
            }),
        });

        const data = await res.json();
        console.log("‚úÖ R√©ponse FastAPI /mbti :", data);
    } catch (err) {
        console.error("‚ùå Erreur POST /mbti :", err);
    }
  };


  return (
    <main className="p-8">
      <h1 className="text-2xl font-bold mb-6">Questionnaire MBTI</h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        {questions.map((q, index) => (
          <div key={index} className="mb-4">
            <p className="mb-2">{q}</p>
            <div className="flex gap-4">
              {[1, 2, 3, 4, 5, 6].map((value) => (
                <label key={value} className="flex flex-col items-center">
                  <input
                    type="radio"
                    name={`question-${index}`}
                    value={value}
                    checked={answers[index] === value}
                    onChange={() => handleChange(index, value)}
                  />
                  <span className="text-xs">{value}</span>
                </label>
              ))}
            </div>
          </div>
        ))}

        <button
          type="submit"
          className="bg-blue-500 text-white p-2 rounded"
        >
          Envoyer mes r√©ponses
        </button>
      </form>
    </main>
  );
}
